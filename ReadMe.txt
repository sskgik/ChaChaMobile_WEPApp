チャチャモバイルアプリケーション
使用言語:HTML,CSS,Javascript(Jquery)

セキュリティ対策はサーバー通信の暗号化のみで今後さらに強固にすべくアップデートをお待ちください！

１、index.html(関連css:style.css)について
スプラッシュスクリーンの後アプリ最初に開くページでアプリケーションのトップページになります！

-各種データ表示項目-
Your_Balance  :ブロックチェーン上のChaChaCoinの枚数を取得します（サーバーのRestApiに通信しているので電波が正常でないと正しく取得できません）
Recent Transaction:直近５件の送金データを表示します（受信データ表示に関しては開発中）

-付属ボタンについて-
チャチャをリクエスト：自身のローカルストレージ内パブリックキーをエンコードしたのQRコード表示ページに遷移します！
チャチャを送金     ：送金情報入力画面に遷移します！
QR起動ボタン       :QRリーダーを起動し相手のパブリックキー（公開鍵）のQRコードを読み込み、その情報をローカルストレージに格納し送金情報画面の送り先パブリックキー（公開鍵)
                  のテキストボックスに読み出しローカルストレージに保存したQRデータはここで消去します！
メニューボタン：タッチすると左からメニュー画面がスライド形式で現われます（詳細は下記の通りになります！）
・アドレスブック  ：送金相手のパブリックキーを登録するアドレス帳の機能になっております！登録した名前とパブリックキー（公開鍵）をテーブル（表）で保存します！
・My QRコード    :自身のローカルストレージ内のパブリックキー（公開鍵）を拡大表示の画面で表示します！
・チャチャについて：チャチャコイン に関する情報画面が表示されます！
・お問い合わせ    :チャチャコインの公式twitterに質問、お問い合わせが行えます！
・アプリの使い方  :アプリの使い方としてマニュアルのある開発者のブログページに移動します！

２、sendinfo.html(関連css:sendinfo.css)について
ー各種ボタンについてー
メインページへ     :トップページに移動します！
Clear Input(消去):送金先、送金枚数の全てのテキストボックスの内容をクリア（消去する）
Send(送金)       :テキストボックスの文字を受け取りJSON化した送金情報をサーバーサイドに送りサーバーサイドで文字列をAddress型に変換しブロックチェーンにトランザクションををブロードキャストする
QR起動ボタン      :QRリーダーを起動し相手のパブリックキー（公開鍵）のQRコードを読み込み、その情報を送金情報画面の送り先パブリックキー（公開鍵)
                  のテキストボックスに書き出す！

３、recieverec.html(関連css recieverec.css)について
各種ボタン機能     
メインページへ     :トップページに移動します！
QRコードをタッチ   :自身のローカルストレージ内のPublicKey（公開鍵）をエンコード化したQRを拡大表示します！

＊テキストボックスの入力は将来json化してQR情報を拡大画面でjsonをふくむQRを読むと送金情報画面にパブリックキーとamount両方に値が入るようにしたいと思っております！

３、lergeQR.hetm(関連css:lergeQR.css)について
ローカルストレージ内のパブリックキー （公開鍵）のエンコード化したQRを画面の中央に拡大表示します！

４、addressbook.html(関連css:addressbook.css)について
各種ボタン機能
左上戻るボタン（＜）:トップページに移動します！
Delete(ゴミ箱)    :アドレスブック内の表示されている登録を行った情報を全て削除します！（本アプリで使うローカルストレージ内のプライベートキー、パブリックキー 、送金履歴情報は消失しない仕様にしてます）

addressbook：tableに登録されたアドレスと名前を表示します！

-Javascript 関数名と関連HTML対応-
１、コメント//メニュー画面のスクリプト > index.html ,addressbook.html
メニュー画面のスライド動作をCSSと組み合わせて左から出るか右から出るかは変更しています！

２、コメント//入力内容のクリア（function名：clearinput）> sendinfo.html
テキストボックス内のテキスト情報を削除

３、コメント//*mainのQRスキャナファンクション*/(function名：scanBarcode1）> index.html
トップページ画面のQRコード起動コードでスキャンができたときは確認画面が表示するのでそこでOKを押すと画面遷移し送金情報画面のテキストボックスに反映
もしスキャンせずに終了（携帯付属の戻るボタンを押した場合）した場合はそのまま終了(ローカルストレージ使用)

４、コメント///*sendpageのQRスキャナファンクション*/(function名：scanBarcode２）> sendinfo.html
QRコード起動コードでスキャンができたときは確認画面が表示するのでそこでOKを押すと送金情報画面のテキストボックスに反映
もしスキャンせずに終了（携帯付属の戻るボタンを押した場合）した場合はトップページに戻りそのまま終了

５、コメント////QRによるアドレス登録(function名：scanBarcode3）>addressbook.html
登録相手のスキャンコードをスキャンするとスキャン結果と登録名入力画面が表示するので、入力した名前を使って登録します！
入力がされなかった場合はNo Nameで登録します！確認画面でキャンセルを押した場合は登録せずに終了します！

６、コメント//クリップボードによるアドレスの登録(function名：register） >  addressbook.html
クリップボードからコピー＆ペーストでアドレスの登録を行うことが可能です！
使用例としてはメールやラインやtwitterなどのやりとりでパブリックキー （公開鍵）を取得したものをアプリに登録するために使います！
表示されるメッセージの順でパブリックキー （公開鍵）と名前を入力してください名前入力以外のところでキャンセルを押したり入力せずにOKwo押すと登録しないで終了します

７、コメント//パブリックキーからのQR生成(function名：generateQR）>recieverec.html
ローカルストレージ からPublicKey（公開鍵）のエンコード化したQRコードを表示

８、コメント//パブリックキーからのQR生成(function名：lergeQR）> lergeQR.html
上記のQRコードの拡大表示！

９、コメント//about ChaCha(function名：chachacoin）>index.html
チャチャコインに関する情報を表示します

10、コメント//Contactdevelopper(function名：contact）> index.html
チャチャコインアプリに関しての問い合わせなどを行えます

11.コメント//access blogpage(function名：manual）> index.html
ユーザマニュアルのページに遷移します

12.コメント//table値を入力(function名:addbook）> addressbook.html
5,6の関数で入力されたパブリックキー と登録名情報を読み込みaddressbook.htmlのtable（表）を追加して表示する関数！それと同時にアドレスブックをローカルストレージに登録します

13.コメント//localStorageの読み出し(function名:load）> addressbook.html
一旦addressbookページから抜けて再度アドレスブックページを開いたタイミングでの読み出しを行います
指定ストレージのデータに値がなければ処理は行いません

14.コメント//ローカルストレージから削除(function名:Delete）> addressbook.html
アドレスブックの登録してある部分のみローカルストレージから削除します！
また一部データは一旦避難し再登録を行っています！

15.コメント//コインの送金情報に関して(function名:send）> sendinfo.html
ブロックチェーンにコイン移動の指示を出すための関数です！Send(送金)ボタンが押されると一旦ボタン機能をOFFにします
続いてこちらの情報をjson化します（自分のプライベートキー、送金先テキストエリアの中身、送金枚数エリアの枚数）＞空白のエリアがある場合は送金処理を停止します！
ajax通信を使ってpost送信でサーバサイドに送金リクエストを行います！送金リクエストの情報に誤りがあればその情報に合わせてJsonレスポンスが帰ってきます！
その場合は入力されてる内容を再度確認ください！送金が完了すると下記メッセージが表示します！
「送信に成功しました！ TransactionID  Send_Result:Success」
サーバーサイドの通信に失敗した場合は通信がうまくいかなかったメッセージが帰ってきます！
この場合 通信が圏外or通信できてない サーバーサイドの停止など原因の切り分けが必要になります！再度挑戦してダメな場合は運営に確認してください！

16.コメント//ローカルストレージ のプライベートキーの有無確認とブロックチェーンからデータの取得 (function名:showasset）> index.html
・初めのローカルストレージ内の送金履歴の情報を呼び出します（情報がない場合は表示しません）

・ここからの関数はアプリ初期時及び何らかの影響または他のアプリの影響でローカルストレージのプライベートキーのデータが飛んでしまった場合にトップページを開くときに起動します！
（＊運用上危険になる可能性があるのでデータが飛んでしまった場合の救出策として裏オプションは用意してますが内容は書きません：このオプションはプライベートキーが第３者に渡った場合危険なため）
＊もしどうしても必要になった場合は運営に相談ください！
まずサーバー上に保存するpkcs12のファイル名になるnicknameを入力ください！もし入力なしの場合は全ての処理を中断します
入力された情報を下にサーバーサイドでpkcs12のファイルを生成しプライベートキー（秘密鍵）を生成しそこからパブリックキー（公開鍵）をコード変換を用いて生成し
JSON化しレスポンスとしてデータを返します！
この受け取った情報を下にクライアントモバイルの方で受け取った情報のアラートが表示されますのでスクリーンショットをとってください！

・続いてローカルストレージのパブリックキーのデータをサーバーサイドに送信しブロックチェーン上のチャチャの枚数を取得します！
取得が成功すればindex.htmlのid＝contact2の部分に枚数を表示します！もし失敗すれば「ー」が出力します

17.コメント//テキストボックスにfocusされたとき//送信情報画面起動時のlocalstrage呼び出し(function名:detection）> sendinfo.html
３の関数で取得したローカルストレージのデータを読み出しデータがない場合は何もしない
ソフトウェアキーボードの表示でレイアウト崩れを防ぐためにテキストボックスにフォーカスされたときに下の２点のボタンを表示をしないようにします

18.裏オプション（必要になったら使う）

19.コメント//recent transactionの記録(function名:hystorylog）> sendinfo.html
指定ローカルストレージのデータを読み出し条件に合わせてローカルストレージへの送金履歴として（送金時刻、枚数）をローカルストレージに保存する

20.コメント//送金履歴の読み出し(function名:recenttransaction）> sendinfo.html
showasset関数内での最初の処理でローカルストレージ の値の呼び出ししてtableとして値を表示するする！
